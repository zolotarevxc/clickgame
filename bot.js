import TelegramBot from 'node-telegram-bot-api';
import express from 'express';
import cors from 'cors';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';
import { getOrCreateUser, updateUser, getLeaderboard, processReferral, getReferralStats } from './database.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config();

const token = process.env.BOT_TOKEN;
const webAppUrl = process.env.WEBAPP_URL || 'https://your-ngrok-url.ngrok.io';

if (!token) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!');
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });
const app = express();

app.use(cors());
app.use(express.json());
app.use(express.static('dist'));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
bot.onText(/\/start(.*)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;
  const firstName = msg.from.first_name || '–ò–≥—Ä–æ–∫';
  const referralParam = match[1] ? match[1].trim() : '';
  
  // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = getOrCreateUser(telegramId, {
    username: msg.from.username,
    first_name: msg.from.first_name
  });
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
  let referralMessage = '';
  if (referralParam && referralParam !== user.referral_code) {
    const referrer = processReferral(referralParam, telegramId);
    if (referrer) {
      referralMessage = `\nüéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å 500 –º–æ–Ω–µ—Ç –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!`;
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
      try {
        await bot.sendMessage(referrer.telegram_id, 
          `üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫!\nüí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1000 –º–æ–Ω–µ—Ç!`
        );
      } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É:', error.message);
      }
    }
  }
  
  const welcomeMessage = `üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NotCoin, ${firstName}!${referralMessage}

üíé –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã –∫–ª–∏–∫–∞–º–∏
‚ö° –°–ª–µ–¥–∏—Ç–µ –∑–∞ —ç–Ω–µ—Ä–≥–∏–µ–π  
üìà –ü–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å
üõí –ü–æ–∫—É–ø–∞–π—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è
üèÜ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è
üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!`;

  const keyboard = {
    inline_keyboard: [[
      {
        text: 'üéÆ –ò–≥—Ä–∞—Ç—å –≤ NotCoin',
        web_app: { url: webAppUrl }
      }
    ]]
  };

  bot.sendMessage(chatId, welcomeMessage, {
    reply_markup: keyboard,
    parse_mode: 'HTML'
  });
});

bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  
  const helpMessage = `üìñ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ NotCoin:</b>

üéØ <b>–û—Å–Ω–æ–≤—ã –∏–≥—Ä—ã:</b>
‚Ä¢ –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –º–æ–Ω–µ—Ç–µ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –ö–∞–∂–¥—ã–π –∫–ª–∏–∫ —Ç—Ä–∞—Ç–∏—Ç 1 —ç–Ω–µ—Ä–≥–∏—é
‚Ä¢ –≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b>
‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
‚Ä¢ –í—ã—à–µ —É—Ä–æ–≤–µ–Ω—å = –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤

üõí <b>–£–ª—É—á—à–µ–Ω–∏—è:</b>
‚Ä¢ –°–∏–ª–∞ –∫–ª–∏–∫–∞ - –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç –∑–∞ –∫–ª–∏–∫
‚Ä¢ –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏ - –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ - –±—ã—Å—Ç—Ä–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ

üèÜ <b>–ó–∞–¥–∞–Ω–∏—è:</b>
‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã

üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã:</b>
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 1000 –º–æ–Ω–µ—Ç
‚Ä¢ –í–∞—à–∏ –¥—Ä—É–∑—å—è –ø–æ–ª—É—á–∞—é—Ç 500 –±–æ–Ω—É—Å–Ω—ã—Ö –º–æ–Ω–µ—Ç

–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üéÆ`;

  bot.sendMessage(chatId, helpMessage, { parse_mode: 'HTML' });
});

bot.onText(/\/stats/, (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;
  
  const user = getOrCreateUser(telegramId);
  const referralStats = getReferralStats(telegramId);
  
  const statsMessage = `üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

üí∞ –ú–æ–Ω–µ—Ç—ã: ${user.coins.toLocaleString()}
üìà –£—Ä–æ–≤–µ–Ω—å: ${user.level}
üéØ –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: ${user.total_clicks.toLocaleString()}
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${referralStats.total_referrals}
üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralStats.total_earnings.toLocaleString()}

–û—Ç–∫—Ä–æ–π—Ç–µ –∏–≥—Ä—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!`;

  bot.sendMessage(chatId, statsMessage, { parse_mode: 'HTML' });
});

bot.onText(/\/leaderboard/, (msg) => {
  const chatId = msg.chat.id;
  
  const leaderboard = getLeaderboard(10);
  let message = 'üèÜ <b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:</b>\n\n';
  
  leaderboard.forEach((user, index) => {
    const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
    const name = user.first_name || user.username || '–ê–Ω–æ–Ω–∏–º';
    message += `${medal} ${name} - ${user.coins.toLocaleString()} –º–æ–Ω–µ—Ç\n`;
  });
  
  bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
bot.on('web_app_data', (msg) => {
  const chatId = msg.chat.id;
  const data = JSON.parse(msg.web_app.data);
  
  console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App:', data);
  
  if (data.type === 'game_result') {
    const { coins, level, clicks } = data;
    
    const resultMessage = `üéâ <b>–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞!</b>

üí∞ –ú–æ–Ω–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${coins.toLocaleString()}
üìà –£—Ä–æ–≤–µ–Ω—å: ${level}
üéØ –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: ${clicks.toLocaleString()}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç! üöÄ`;

    bot.sendMessage(chatId, resultMessage, { parse_mode: 'HTML' });
  }
});

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
app.get('/api/user/:userId', (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    const user = getOrCreateUser(userId);
    
    res.json({
      success: true,
      user: {
        coins: user.coins,
        energy: user.energy,
        maxEnergy: user.max_energy,
        level: user.level,
        coinsPerClick: user.coins_per_click,
        totalClicks: user.total_clicks,
        energyRegenRate: user.energy_regen_rate,
        lastEnergyUpdate: user.last_energy_update,
        dailyBonusLastClaim: user.daily_bonus_last_claim,
        completedTasks: JSON.parse(user.completed_tasks || '[]'),
        upgrades: {
          clickPower: user.upgrade_click_power,
          energyCapacity: user.upgrade_energy_capacity,
          energyRegen: user.upgrade_energy_regen
        },
        referralCode: user.referral_code
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

app.post('/api/save-progress', (req, res) => {
  try {
    const { userId, gameState } = req.body;
    updateUser(parseInt(userId), gameState);
    
    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

app.get('/api/leaderboard', (req, res) => {
  try {
    const leaderboard = getLeaderboard(50);
    res.json({ success: true, leaderboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

app.get('/api/referral-stats/:userId', (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    const stats = getReferralStats(userId);
    res.json({ success: true, stats });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'dist', 'index.html'));
});

const PORT = process.env.PORT || 3000;

app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê Web App URL: ${webAppUrl}`);
  console.log(`ü§ñ Telegram Bot –∞–∫—Ç–∏–≤–µ–Ω`);
  console.log(`üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∞`);
  console.log(`\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:`);
  console.log(`1. –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –≤ .env –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞`);
  console.log(`2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ngrok: ngrok http ${PORT}`);
  console.log(`3. –û–±–Ω–æ–≤–∏—Ç–µ WEBAPP_URL –≤ .env –Ω–∞ URL –æ—Ç ngrok`);
  console.log(`4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
  console.error('–û—à–∏–±–∫–∞ Telegram Bot:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});